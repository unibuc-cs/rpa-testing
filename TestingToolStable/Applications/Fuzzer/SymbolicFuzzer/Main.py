from Executor_SymbolicWorkflowsTester import *

# ---------------------------------------------------------------------------------
# How to run this script ?
"""
For a description of parameters run: python Main.py - h, or check the arguments below
"""

# ---------------------------------------------------------------------------------
# TODO tasks:
# logging support rather than printf

# First install the packages
# pip install pip install z3-solver
# pip install py_expression_eval
# pip install networkx
# pip install pygraphviz
import argparse
import os
from SymbolicSolverStrategies import *
from Parser_DataTypes import DebuggingOptions


# This code is to HUNT people which writes debug things outside options
#-------------------------------------------
ENABLE_PRINT_CATCH_HANDLE = False
if ENABLE_PRINT_CATCH_HANDLE:
    import sys
    import traceback
    class TracePrints(object):
        def __init__(self):
            self.stdout = sys.stdout
            self.encoding = self.stdout.encoding

        def write(self, s):
            self.stdout.write("Writing %r\n" % s)
            traceback.print_stack(file=self.stdout)

        def flush(self):
            self.stdout.flush()


    sys.stdout = TracePrints()
#-------------------------------------------


def runTest(args):
    workflowsTester = SymbolicWorflowsTester(args.modelBasePath, args.workflowsSpecInput, args.symbolicStrategyToUse)

    # PROTO work in progress
    workflowsTester.doTests(args)


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Fuzzer process')
    parser.add_argument('-modelBasePath', type=str, help='Path to the base folder containing workflows and resources', required=True)
    parser.add_argument('-workflowsSpecInput', type=str, help='Local (from base folder) path to the json model file', required=True)
    parser.add_argument('-solverStrategy', type=str, default="STRATEGY_DFS", required=True) # STRATEGY_OFFLINE_ALL
    parser.add_argument('-outputTests_PrefixFile', type=str, default="generatedests", help='Prefix to the output where to write the sequence of generated tests, in CSV format', required=True)
    parser.add_argument('-outputTests_MaxTestPerFile', type=int, default=10, help='What is the maximum number of tests to bt outputed in a single file', required=True)

    # COncolic specific parameters
    parser.add_argument('-seedsFile', type=str, default="inputSeeds.csv", required=False)
    parser.add_argument('-numRandomGeneratedSeeds', type=int, default=0, required=False)

    # Debugging specific parameters

    parser.add_argument('-debug_outputGraphFile', type=str, default="debug_outputGraph.png", help='Path to the output debug graph file. Put empty string if you don\'t need it', required=True)
    parser.add_argument('-debug_tests_fullPaths', type=int, default=1,
                        help='Use this to output the full path generated by the input. Very costly do not use in production !!', required=True)

    parser.add_argument('-debug_consoleOutput', type=int, default=1,
                        help='Use this to output at console various things...Very costly do not use in production  !!!', required=True)

    parser.add_argument('-debug_tests_fullVariablesContent', type=int, default=1,
                        help='Use this to output all the models variables, not just the one that are inputable by user. Very costly !!', required=True)


    # Arguments processing
    args = parser.parse_args()
    args.symbolicStrategyToUse = SymbolicSolversStrategiesTypes.from_str(args.solverStrategy)
    args.debuggingOptions = DebuggingOptions()
    args.debuggingOptions.parseFromArgs(args)

    runTest(args)

    if args.debuggingOptions.debug_consoleOutput:
        print("Finished")
